name: "Bi-Real-Net-18"
layer {
    name: "data"
    type: "Data"
    top: "data"
    top: "label"
    include {
        phase: TRAIN
    }
    transform_param {
        mirror: true
        crop_size: 224
        mean_value: 104
        mean_value: 117
        mean_value: 123
   }
    data_param {
    source: "/home/imagenet_data/ilsvrc12_train_lmdb"
    batch_size: 64
    backend: LMDB
    }
}
layer {
    name: "data"
    type: "Data"
    top: "data"
    top: "label"
    include {
        phase: TEST
    }
    transform_param {
        mirror: false
        crop_size: 224
        mean_value: 104
        mean_value: 117
        mean_value: 123
   }
    data_param {
    source: "/home/imagenet_data/ilsvrc12_val_lmdb"
    batch_size: 100
    backend: LMDB
    }
}

layer {
    bottom: "data"
    top: "conv1"
    name: "conv1"
    type: "Convolution"
    convolution_param {
        num_output: 64
        kernel_size: 7
        pad: 3
        stride: 2
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "bn_conv1"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "scale_conv1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "conv1"
    top: "pool1"
    name: "pool1"
    type: "Pooling"
    pooling_param {
        kernel_size: 3
        stride: 2
        pool: MAX
    }
}

layer {
    bottom: "pool1"
    top: "thre1"
    name: "thre1"
    type: "Threshold"
}

layer {
    bottom: "thre1"
    top: "res2a_branch2a"
    name: "res2a_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2a"
    name: "bn2a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2a"
    name: "scale2a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "pool1"
    bottom: "res2a_branch2a"
    top: "res2a1"
    name: "res2a1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}
layer {
    bottom: "res2a1"
    top: "res2a_branch2a_thre"
    name: "res2a_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res2a_branch2a_thre"
    top: "res2a_branch2b"
    name: "res2a_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }    }
}

layer {
    bottom: "res2a_branch2b"
    top: "res2a_branch2b"
    name: "bn2a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res2a_branch2b"
    top: "res2a_branch2b"
    name: "scale2a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2a1"
    bottom: "res2a_branch2b"
    top: "res2a2"
    name: "res2a2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res2a2"
    top: "res2a_branch2b_thre"
    name: "res2a_branch2b_thre"
    type: "Threshold"
}

layer {
    bottom: "res2a_branch2b_thre"
    top: "res2b_branch2a"
    name: "res2b_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res2b_branch2a"
    top: "res2b_branch2a"
    name: "bn2b_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res2b_branch2a"
    top: "res2b_branch2a"
    name: "scale2b_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2a2"
    bottom: "res2b_branch2a"
    top: "res2b1"
    name: "res2b1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res2b1"
    top: "res2b_branch2a_thre"
    name: "res2b_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res2b_branch2a_thre"
    top: "res2b_branch2b"
    name: "res2b_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res2b_branch2b"
    top: "res2b_branch2b"
    name: "bn2b_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res2b_branch2b"
    top: "res2b_branch2b"
    name: "scale2b_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2b1"
    bottom: "res2b_branch2b"
    top: "res2b2"
    name: "res2b2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res2b2"
    top: "res2b_thre"
    name: "res2b_thre"
    type: "Threshold"
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "res2b2"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 2
    stride: 2
  }
}


layer {
    bottom: "pool2"
    top: "res3a_branch1"
    name: "res3a_branch1-2"
    type: "Convolution"
    convolution_param {
        num_output: 128
        kernel_size: 1
        pad: 0
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res2b_thre"
    top: "res3a_branch2a"
    name: "res3a_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2a"
    name: "bn3a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2a"
    name: "scale3a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3a_branch1"
    bottom: "res3a_branch2a"
    top: "res3a1"
    name: "res3a1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res3a1"
    top: "res3a_branch2a_thre"
    name: "res3a_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res3a_branch2a_thre"
    top: "res3a_branch2b"
    name: "res3a_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res3a_branch2b"
    top: "res3a_branch2b"
    name: "bn3a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res3a_branch2b"
    top: "res3a_branch2b"
    name: "scale3a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3a1"
    bottom: "res3a_branch2b"
    top: "res3a2"
    name: "res3a2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res3a2"
    top: "res3a_thre"
    name: "res3a_thre"
    type: "Threshold"
}

layer {
    bottom: "res3a_thre"
    top: "res3b_branch2a"
    name: "res3b_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res3b_branch2a"
    top: "res3b_branch2a"
    name: "bn3b_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res3b_branch2a"
    top: "res3b_branch2a"
    name: "scale3b_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
    bottom: "res3a2"
    bottom: "res3b_branch2a"
    top: "res3b1"
    name: "res3b1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res3b1"
    top: "res3b_branch2a_thre"
    name: "res3b_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res3b_branch2a_thre"
    top: "res3b_branch2b"
    name: "res3b_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res3b_branch2b"
    top: "res3b_branch2b"
    name: "bn3b_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res3b_branch2b"
    top: "res3b_branch2b"
    name: "scale3b_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3b1"
    bottom: "res3b_branch2b"
    top: "res3b2"
    name: "res3b2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res3b2"
    top: "res3b_thre"
    name: "res3b_thre"
    type: "Threshold"
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "res3b2"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 2
    stride: 2
  }
}

layer {
    bottom: "pool3"
    top: "res4a_branch1"
    name: "res4a_branch1-2"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 1
        pad: 0
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res3b_thre"
    top: "res4a_branch2a"
    name: "res4a_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2a"
    name: "bn4a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2a"
    name: "scale4a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4a_branch1"
    bottom: "res4a_branch2a"
    top: "res4a1"
    name: "res4a1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res4a1"
    top: "res4a_branch2a_thre"
    name: "res4a_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res4a_branch2a_thre"
    top: "res4a_branch2b"
    name: "res4a_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res4a_branch2b"
    top: "res4a_branch2b"
    name: "bn4a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res4a_branch2b"
    top: "res4a_branch2b"
    name: "scale4a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4a1"
    bottom: "res4a_branch2b"
    top: "res4a2"
    name: "res4a2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res4a2"
    top: "res4a_thre"
    name: "res4a_thre"
    type: "Threshold"
}

layer {
    bottom: "res4a_thre"
    top: "res4b_branch2a"
    name: "res4b_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res4b_branch2a"
    top: "res4b_branch2a"
    name: "bn4b_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res4b_branch2a"
    top: "res4b_branch2a"
    name: "scale4b_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
    bottom: "res4a2"
    bottom: "res4b_branch2a"
    top: "res4b1"
    name: "res4b1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res4b1"
    top: "res4b_branch2a_thre"
    name: "res4b_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res4b_branch2a_thre"
    top: "res4b_branch2b"
    name: "res4b_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res4b_branch2b"
    top: "res4b_branch2b"
    name: "bn4b_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res4b_branch2b"
    top: "res4b_branch2b"
    name: "scale4b_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4b1"
    bottom: "res4b_branch2b"
    top: "res4b2"
    name: "res4b2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res4b2"
    top: "res4b_thre"
    name: "res4b_thre"
    type: "Threshold"
}

layer {
  name: "pool4"
  type: "Pooling"
  bottom: "res4b2"
  top: "pool4"
  pooling_param {
    pool: AVE
    kernel_size: 2
    stride: 2
  }
}

layer {
    bottom: "pool4"
    top: "res5a_branch1"
    name: "res5a_branch1-2"
    type: "Convolution"
    convolution_param {
        num_output: 512
        kernel_size: 1
        pad: 0
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res4b_thre"
    top: "res5a_branch2a"
    name: "res5a_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 512
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2a"
    name: "bn5a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2a"
    name: "scale5a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res5a_branch1"
    bottom: "res5a_branch2a"
    top: "res5a1"
    name: "res5a1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res5a1"
    top: "res5a_branch2a_thre"
    name: "res5a_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res5a_branch2a_thre"
    top: "res5a_branch2b"
    name: "res5a_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 512
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res5a_branch2b"
    top: "res5a_branch2b"
    name: "bn5a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res5a_branch2b"
    top: "res5a_branch2b"
    name: "scale5a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res5a1"
    bottom: "res5a_branch2b"
    top: "res5a2"
    name: "res5a2"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res5a2"
    top: "res5a_thre"
    name: "res5a_thre"
    type: "Threshold"
}

layer {
    bottom: "res5a_thre"
    top: "res5b_branch2a"
    name: "res5b_branch2a"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 512
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res5b_branch2a"
    top: "res5b_branch2a"
    name: "bn5b_branch2a"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res5b_branch2a"
    top: "res5b_branch2a"
    name: "scale5b_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
    bottom: "res5a2"
    bottom: "res5b_branch2a"
    top: "res5b1"
    name: "res5b1"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res5b1"
    top: "res5b_branch2a_thre"
    name: "res5b_branch2a_thre"
    type: "Threshold"
}

layer {
    bottom: "res5b_branch2a_thre"
    top: "res5b_branch2b"
    name: "res5b_branch2b"
    type: "BinaryConvolution"
    convolution_param {
        num_output: 512
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
    bias_filler {
      type: "constant"
      value: 0.0
        }
    }
}

layer {
    bottom: "res5b_branch2b"
    top: "res5b_branch2b"
    name: "bn5b_branch2b"
    type: "BatchNorm"
    batch_norm_param {
      moving_average_fraction: 0.9 
    }
    
}

layer {
    bottom: "res5b_branch2b"
    top: "res5b_branch2b"
    name: "scale5b_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res5b1"
    bottom: "res5b_branch2b"
    top: "res5b"
    name: "res5b"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res5b"
    top: "pool5"
    name: "pool5"
    type: "Pooling"
    pooling_param {
        pool: AVE
        global_pooling: true
  }
}

layer {
    bottom: "pool5"
    top: "fc1000"
    name: "fc1000-2"
    type: "InnerProduct"
    param {
        lr_mult: 1
        decay_mult: 1
    }
    param {
        lr_mult: 2
        decay_mult: 1
    }
    inner_product_param {
        num_output: 1000
        weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
}

layer {
    bottom: "fc1000"
    bottom: "label"
    name: "loss"
    type: "SoftmaxWithLoss"
    top: "loss"
}

layer {
    bottom: "fc1000"
    bottom: "label"
    top: "acc/top-1"
    name: "acc/top-1"
    type: "Accuracy"
    include {
        phase: TEST
    }
}

layer {
    bottom: "fc1000"
    bottom: "label"
    top: "acc/top-5"
    name: "acc/top-5"
    type: "Accuracy"
    include {
        phase: TEST
    }
    accuracy_param {
        top_k: 5
    }
}

